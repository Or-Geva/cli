name: JFrog CLI Tests
on:
  push:
  # Triggers the workflow on labeled PRs only.
  pull_request_target:
    types: [labeled]
# Ensures that only the latest commit is running for each PR at a time.
# Ignores this rule for push events.
concurrency:
  group: ${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true
jobs:
  # CLI-Tests:
  #   if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
  #   name: ${{ matrix.suite }} (${{ matrix.os }})
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       suite:
  #         [
  #           artifactory,
  #           artifactoryProject,
  #           pip,
  #           distribution,
  #           xray,
  #           plugins,
  #           npm,
  #           maven,
  #           gradle,
  #           nuget,
  #           go,
  #         ]
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   env:
  #     GRADLE_OPTS: -Dorg.gradle.daemon=false
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}

  #     - name: Install Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.17.x

  #     - name: Install npm
  #       uses: actions/setup-node@v2
  #       with:
  #         node-version: "16"
  #       if: ${{ matrix.suite == 'npm' || matrix.suite == 'xray' }}

  #     - name: Install Java
  #       uses: actions/setup-java@v2
  #       with:
  #         java-version: "11"
  #         distribution: "adopt"
  #       if: ${{ matrix.suite == 'maven' || matrix.suite == 'gradle' || matrix.suite == 'xray' }}

  #     - name: Install NuGet
  #       uses: nuget/setup-nuget@v1
  #       with:
  #         nuget-version: 5.x
  #       if: ${{ matrix.suite == 'nuget' }}

  #     - name: Setup Python
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.x"
  #       if: ${{ matrix.suite == 'pip' || matrix.suite == 'xray' }}

  #     - name: Setup Python virtual environment
  #       if: ${{ matrix.suite == 'pip' || matrix.suite == 'xray' }}
  #       run: pip install virtualenv && python -m virtualenv venv

  #     - name: Activate Python virtual env on Windows
  #       if: ${{ (matrix.suite == 'pip' || matrix.suite == 'xray') && runner.os == 'Windows' }}
  #       run: . venv\Scripts\activate.ps1

  #     - name: Activate Python virtual env on Posix
  #       if: ${{ (matrix.suite == 'pip'|| matrix.suite == 'xray') && (runner.os == 'macOS' || runner.os == 'Linux') }}
  #       run: source venv/bin/activate

  #     - name: Run tests on ecosys
  #       if: ${{ matrix.suite == 'distribution' || matrix.suite == 'plugins' || matrix.suite == 'artifactoryProject' }}
  #       run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.${{ matrix.suite }}=true --jfrog.url=${{ secrets.PLATFORM_URL }} --jfrog.adminToken=${{ secrets.PLATFORM_ADMIN_TOKEN }} --jfrog.user=${{ secrets.PLATFORM_USER }} --ci.runId=${{ runner.os }}-${{ matrix.suite }}

  #     - name: Run tests in free tier
  #       if: ${{ matrix.suite == 'artifactory' || matrix.suite == 'pip' || matrix.suite == 'xray' || matrix.suite == 'npm' || matrix.suite == 'maven' || matrix.suite == 'gradle' || matrix.suite == 'nuget' || matrix.suite == 'go' }}
  #       run: go test -v github.com/jfrog/jfrog-cli --timeout 0 --test.${{ matrix.suite }}=true --jfrog.url=${{ secrets.PLATFORM_URL_FREE_TIER }} --jfrog.adminToken=${{ secrets.PLATFORM_ADMIN_TOKEN_FREE_TIER }} --jfrog.user=${{ secrets.PLATFORM_USER_FREE_TIER }} --ci.runId=${{ runner.os }}-${{ matrix.suite }}

  Docker-tests:
    if: contains(github.event.pull_request.labels.*.name, 'safe to test') || github.event_name == 'push'
    name: docker (ubuntu-latest)
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17.x
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Run Docker tests
      run: go test -v -timeout 0 --test.docker=true --jfrog.url=${{ secrets.PLATFORM_URL_FREE_TIER }} -jfrog.user=${{ secrets.PLATFORM_USER_FREE_TIER }} --jfrog.password=${{ secrets.PLATFORM_ADMIN_TOKEN_FREE_TIER }} --rt.dockerRepoDomain=ecosysjfrogb.jfrog.io/docker-virtual --rt.dockerVirtualRepo=docker-virtual --rt.DockerLocalRepo=docker-local --rt.dockerRemoteRepo=docker-remote

  # Scripts-tests:
  #   name: scripts (${{ matrix.os }})
  #   defaults:
  #     run:
  #       shell: bash
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2
  #       with:
  #         ref: ${{ github.event.pull_request.head.sha }}
  #     - name: Test install CLI - jf
  #       run: sh build/installcli/jf.sh && jf --version
  #     - name: Test install CLI - jfrog
  #       run: sh build/installcli/jfrog.sh && jfrog --version
  #     - name: Test get CLI - jf
  #       run: sh build/getcli/jf.sh && ./jf --version
  #     - name: Test get CLI - jfrog
  #       run: sh build/getcli/jfrog.sh && ./jfrog --version